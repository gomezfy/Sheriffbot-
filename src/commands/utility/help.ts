import { 
  SlashCommandBuilder, 
  ActionRowBuilder, 
  StringSelectMenuBuilder, 
  StringSelectMenuOptionBuilder,
  ChatInputCommandInteraction, 
  MessageFlags, 
  EmbedBuilder 
} from 'discord.js';
import { t, getLocale } from '../../utils/i18n';
import { 
  getMoneybagEmoji, 
  getSlotMachineEmoji, 
  getPickaxeEmoji, 
  getRevolverEmoji,
  getCowboyEmoji,
  getInfoEmoji
} from '../../utils/customEmojis';

function getMainEmbed(interaction: ChatInputCommandInteraction): EmbedBuilder {
  const locale = getLocale(interaction);
  const cowboyEmoji = getCowboyEmoji();
  
  const description = locale === 'pt-BR'
    ? 'ü§† **Bem-vindo ao Sheriff Bot!**\n\nSelecione uma categoria no menu abaixo para ver os comandos dispon√≠veis.'
    : locale === 'es-ES'
    ? 'ü§† **¬°Bienvenido a Sheriff Bot!**\n\nSelecciona una categor√≠a en el men√∫ de abajo para ver los comandos disponibles.'
    : locale === 'fr'
    ? 'ü§† **Bienvenue sur Sheriff Bot!**\n\nS√©lectionnez une cat√©gorie dans le menu ci-dessous pour voir les commandes disponibles.'
    : 'ü§† **Welcome to Sheriff Bot!**\n\nSelect a category from the menu below to view available commands.';
  
  return new EmbedBuilder()
    .setColor(0xFFD700)
    .setTitle(`${cowboyEmoji} ${t(interaction, 'help_title')}`)
    .setDescription(description)
    .setThumbnail('https://cdn.discordapp.com/avatars/1426734768111747284/77c49c0e33e64e32cc5bc42f9e6cfe82.png')
    .setFooter({ text: t(interaction, 'help_footer') })
    .setTimestamp();
}

function getCategoryEmbed(interaction: ChatInputCommandInteraction, category: string): EmbedBuilder {
  const locale = getLocale(interaction);
  const cowboyEmoji = getCowboyEmoji();
  
  const dmText: Record<string, string> = {
    'pt-BR': '(DM)',
    'en-US': '(DM)',
    'es-ES': '(MP)',
    'fr': '(MP)'
  };
  
  const serverText: Record<string, string> = {
    'pt-BR': '(Server)',
    'en-US': '(Server)',
    'es-ES': '(Server)',
    'fr': '(Server)'
  };

  const embed = new EmbedBuilder()
    .setColor(0xFFD700)
    .setThumbnail('https://cdn.discordapp.com/avatars/1426734768111747284/77c49c0e33e64e32cc5bc42f9e6cfe82.png')
    .setFooter({ text: t(interaction, 'help_footer') })
    .setTimestamp();

  switch (category) {
    case 'economy': {
      const moneyEmoji = getMoneybagEmoji();
      const economyCommands = locale === 'pt-BR' 
        ? `\`/daily\` ${dmText[locale]} - Recompensa di√°ria
\`/give\` ${serverText[locale]} - Transferir moedas/itens
\`/inventory\` ${dmText[locale]} - Ver seu invent√°rio
\`/leaderboard\` ${dmText[locale]} - Top 10 jogadores
\`/redeem\` ${dmText[locale]} - Resgatar c√≥digos
\`/middleman\` ${dmText[locale]} - Converter moedas
\`/territories\` ${serverText[locale]} - Sistema de territ√≥rios`
        : locale === 'es-ES'
        ? `\`/daily\` ${dmText[locale]} - Recompensa diaria
\`/give\` ${serverText[locale]} - Transferir monedas/objetos
\`/inventory\` ${dmText[locale]} - Ver tu inventario
\`/leaderboard\` ${dmText[locale]} - Top 10 jugadores
\`/redeem\` ${dmText[locale]} - Canjear c√≥digos
\`/middleman\` ${dmText[locale]} - Convertir monedas
\`/territories\` ${serverText[locale]} - Sistema de territorios`
        : locale === 'fr'
        ? `\`/daily\` ${dmText[locale]} - R√©compense quotidienne
\`/give\` ${serverText[locale]} - Transf√©rer monnaie/objets
\`/inventory\` ${dmText[locale]} - Voir votre inventaire
\`/leaderboard\` ${dmText[locale]} - Top 10 joueurs
\`/redeem\` ${dmText[locale]} - Codes de rachat
\`/middleman\` ${dmText[locale]} - Convertir monnaie
\`/territories\` ${serverText[locale]} - Syst√®me de territoires`
        : `\`/daily\` ${dmText[locale]} - Daily reward
\`/give\` ${serverText[locale]} - Transfer coins/items
\`/inventory\` ${dmText[locale]} - View your inventory
\`/leaderboard\` ${dmText[locale]} - Top 10 players
\`/redeem\` ${dmText[locale]} - Redeem codes
\`/middleman\` ${dmText[locale]} - Convert currency
\`/territories\` ${serverText[locale]} - Territory system`;

      embed.setTitle(`${moneyEmoji} ${t(interaction, 'help_economy_title')}`)
        .setDescription(economyCommands);
      break;
    }

    case 'gambling': {
      const slotEmoji = getSlotMachineEmoji();
      const gamblingCommands = locale === 'pt-BR'
        ? `\`/casino\` ${dmText[locale]} - Slot machine
\`/dice\` ${serverText[locale]} - Duelo de dados
\`/poker\` ${serverText[locale]} - Texas Hold'em
\`/bankrob\` ${serverText[locale]} - Assalto cooperativo
\`/duel\` ${serverText[locale]} - Duelo PvP (HP system)`
        : locale === 'es-ES'
        ? `\`/casino\` ${dmText[locale]} - Tragamonedas
\`/dice\` ${serverText[locale]} - Duelo de dados
\`/poker\` ${serverText[locale]} - Texas Hold'em
\`/bankrob\` ${serverText[locale]} - Asalto cooperativo
\`/duel\` ${serverText[locale]} - Duelo PvP (HP system)`
        : locale === 'fr'
        ? `\`/casino\` ${dmText[locale]} - Machine √† sous
\`/dice\` ${serverText[locale]} - Duel de d√©s
\`/poker\` ${serverText[locale]} - Texas Hold'em
\`/bankrob\` ${serverText[locale]} - Braquage coop√©ratif
\`/duel\` ${serverText[locale]} - Duel PvP (HP system)`
        : `\`/casino\` ${dmText[locale]} - Slot machine
\`/dice\` ${serverText[locale]} - Dice duel
\`/poker\` ${serverText[locale]} - Texas Hold'em
\`/bankrob\` ${serverText[locale]} - Cooperative heist
\`/duel\` ${serverText[locale]} - PvP duel (HP system)`;

      embed.setTitle(`${slotEmoji} ${t(interaction, 'help_gambling_title')}`)
        .setDescription(gamblingCommands);
      break;
    }

    case 'mining': {
      const pickaxeEmoji = getPickaxeEmoji();
      const miningCommands = locale === 'pt-BR'
        ? `\`/mine\` ${serverText[locale]} - Minerar ouro (Solo/Cooperativo)`
        : locale === 'es-ES'
        ? `\`/mine\` ${serverText[locale]} - Minar oro (Solo/Cooperativo)`
        : locale === 'fr'
        ? `\`/mine\` ${serverText[locale]} - Miner de l'or (Solo/Coop√©ratif)`
        : `\`/mine\` ${serverText[locale]} - Mine gold (Solo/Cooperative)`;

      embed.setTitle(`${pickaxeEmoji} ${t(interaction, 'help_mining_title')}`)
        .setDescription(miningCommands);
      break;
    }

    case 'profile': {
      const profileCommands = locale === 'pt-BR'
        ? `\`/profile\` ${dmText[locale]} - Ver perfil com estat√≠sticas
\`/avatar\` ${dmText[locale]} - Customizar avatar do perfil
\`/inventory\` ${dmText[locale]} - Ver invent√°rio completo`
        : locale === 'es-ES'
        ? `\`/profile\` ${dmText[locale]} - Ver perfil con estad√≠sticas
\`/avatar\` ${dmText[locale]} - Personalizar avatar del perfil
\`/inventory\` ${dmText[locale]} - Ver inventario completo`
        : locale === 'fr'
        ? `\`/profile\` ${dmText[locale]} - Voir profil avec statistiques
\`/avatar\` ${dmText[locale]} - Personnaliser avatar du profil
\`/inventory\` ${dmText[locale]} - Voir inventaire complet`
        : `\`/profile\` ${dmText[locale]} - View profile with stats
\`/avatar\` ${dmText[locale]} - Customize profile avatar
\`/inventory\` ${dmText[locale]} - View complete inventory`;

      embed.setTitle(`üë§ ${t(interaction, 'help_profile_title')}`)
        .setDescription(profileCommands);
      break;
    }

    case 'bounty': {
      const revolverEmoji = getRevolverEmoji();
      const bountyCommands = locale === 'pt-BR'
        ? `\`/wanted\` ${serverText[locale]} - Colocar recompensa em algu√©m
\`/bounties\` ${serverText[locale]} - Ver recompensas ativas
\`/capture\` ${serverText[locale]} - Capturar procurado
\`/clearbounty\` ${serverText[locale]} - Limpar sua recompensa`
        : locale === 'es-ES'
        ? `\`/wanted\` ${serverText[locale]} - Poner recompensa a alguien
\`/bounties\` ${serverText[locale]} - Ver recompensas activas
\`/capture\` ${serverText[locale]} - Capturar buscado
\`/clearbounty\` ${serverText[locale]} - Limpiar tu recompensa`
        : locale === 'fr'
        ? `\`/wanted\` ${serverText[locale]} - Mettre une prime sur quelqu'un
\`/bounties\` ${serverText[locale]} - Voir primes actives
\`/capture\` ${serverText[locale]} - Capturer recherch√©
\`/clearbounty\` ${serverText[locale]} - Effacer votre prime`
        : `\`/wanted\` ${serverText[locale]} - Put bounty on someone
\`/bounties\` ${serverText[locale]} - View active bounties
\`/capture\` ${serverText[locale]} - Capture wanted person
\`/clearbounty\` ${serverText[locale]} - Clear your bounty`;

      embed.setTitle(`${revolverEmoji} ${t(interaction, 'help_bounty_title')}`)
        .setDescription(bountyCommands);
      break;
    }

    case 'admin': {
      const adminCommands = locale === 'pt-BR'
        ? `\`/announcement\` - Sistema de an√∫ncios
\`/setwelcome\` - Configurar mensagens de boas-vindas
\`/setlogs\` - Configurar canal de logs
\`/servidor\` - Informa√ß√µes do servidor
\`/uploademojis\` - Gerenciar emojis customizados`
        : locale === 'es-ES'
        ? `\`/announcement\` - Sistema de anuncios
\`/setwelcome\` - Configurar mensajes de bienvenida
\`/setlogs\` - Configurar canal de registros
\`/servidor\` - Informaci√≥n del servidor
\`/uploademojis\` - Gestionar emojis personalizados`
        : locale === 'fr'
        ? `\`/announcement\` - Syst√®me d'annonces
\`/setwelcome\` - Configurer messages de bienvenue
\`/setlogs\` - Configurer canal de journaux
\`/servidor\` - Informations du serveur
\`/uploademojis\` - G√©rer les √©mojis personnalis√©s`
        : `\`/announcement\` - Announcement system
\`/setwelcome\` - Setup welcome messages
\`/setlogs\` - Setup logs channel
\`/servidor\` - Server information
\`/uploademojis\` - Manage custom emojis`;

      embed.setTitle(`‚öôÔ∏è ${t(interaction, 'help_admin_title')}`)
        .setDescription(adminCommands);
      break;
    }

    case 'utility': {
      const infoEmoji = getInfoEmoji();
      const utilityCommands = locale === 'pt-BR'
        ? `\`/help\` - Este menu de ajuda
\`/ping\` - Ver lat√™ncia do bot
\`/idioma\` - Mudar idioma`
        : locale === 'es-ES'
        ? `\`/help\` - Este men√∫ de ayuda
\`/ping\` - Ver latencia del bot
\`/idioma\` - Cambiar idioma`
        : locale === 'fr'
        ? `\`/help\` - Ce menu d'aide
\`/ping\` - Voir latence du bot
\`/idioma\` - Changer la langue`
        : `\`/help\` - This help menu
\`/ping\` - View bot latency
\`/idioma\` - Change language`;

      embed.setTitle(`${infoEmoji} ${t(interaction, 'help_utility_title')}`)
        .setDescription(utilityCommands);
      break;
    }

    default:
      embed.setTitle(`${cowboyEmoji} ${t(interaction, 'help_title')}`)
        .setDescription(t(interaction, 'help_overview_desc'));
  }

  return embed;
}

function getCategorySelectMenu(interaction: ChatInputCommandInteraction, isAdmin: boolean = false): ActionRowBuilder<StringSelectMenuBuilder> {
  const locale = getLocale(interaction);
  
  const categoryNames = {
    economy: locale === 'pt-BR' ? 'üí∞ Economia' : locale === 'es-ES' ? 'üí∞ Econom√≠a' : locale === 'fr' ? 'üí∞ √âconomie' : 'üí∞ Economy',
    gambling: locale === 'pt-BR' ? 'üé∞ Jogos' : locale === 'es-ES' ? 'üé∞ Juegos' : locale === 'fr' ? 'üé∞ Jeux' : 'üé∞ Gambling',
    mining: locale === 'pt-BR' ? '‚õèÔ∏è Minera√ß√£o' : locale === 'es-ES' ? '‚õèÔ∏è Miner√≠a' : locale === 'fr' ? '‚õèÔ∏è Minage' : '‚õèÔ∏è Mining',
    profile: locale === 'pt-BR' ? 'üë§ Perfil' : locale === 'es-ES' ? 'üë§ Perfil' : locale === 'fr' ? 'üë§ Profil' : 'üë§ Profile',
    bounty: locale === 'pt-BR' ? 'üî´ Recompensas' : locale === 'es-ES' ? 'üî´ Recompensas' : locale === 'fr' ? 'üî´ Primes' : 'üî´ Bounty',
    utility: locale === 'pt-BR' ? '‚ÑπÔ∏è Utilidades' : locale === 'es-ES' ? '‚ÑπÔ∏è Utilidades' : locale === 'fr' ? '‚ÑπÔ∏è Utilitaires' : '‚ÑπÔ∏è Utility'
  };

  const options = [
    new StringSelectMenuOptionBuilder()
      .setLabel(categoryNames.economy)
      .setValue('economy')
      .setEmoji('üí∞'),
    new StringSelectMenuOptionBuilder()
      .setLabel(categoryNames.gambling)
      .setValue('gambling')
      .setEmoji('üé∞'),
    new StringSelectMenuOptionBuilder()
      .setLabel(categoryNames.mining)
      .setValue('mining')
      .setEmoji('‚õèÔ∏è'),
    new StringSelectMenuOptionBuilder()
      .setLabel(categoryNames.profile)
      .setValue('profile')
      .setEmoji('üë§'),
    new StringSelectMenuOptionBuilder()
      .setLabel(categoryNames.bounty)
      .setValue('bounty')
      .setEmoji('üî´'),
    new StringSelectMenuOptionBuilder()
      .setLabel(categoryNames.utility)
      .setValue('utility')
      .setEmoji('‚ÑπÔ∏è')
  ];

  // Add admin category if user has permissions
  if (isAdmin) {
    const adminLabel = locale === 'pt-BR' ? '‚öôÔ∏è Admin' : locale === 'es-ES' ? '‚öôÔ∏è Admin' : locale === 'fr' ? '‚öôÔ∏è Admin' : '‚öôÔ∏è Admin';
    options.push(
      new StringSelectMenuOptionBuilder()
        .setLabel(adminLabel)
        .setValue('admin')
        .setEmoji('‚öôÔ∏è')
    );
  }

  const placeholder = locale === 'pt-BR' 
    ? 'üìö Selecione uma categoria...' 
    : locale === 'es-ES'
    ? 'üìö Selecciona una categor√≠a...'
    : locale === 'fr'
    ? 'üìö S√©lectionnez une cat√©gorie...'
    : 'üìö Select a category...';

  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('help_category_select')
    .setPlaceholder(placeholder)
    .addOptions(options);

  return new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);
}

export = {
  data: new SlashCommandBuilder()
    .setName('help')
    .setDescription('Shows all available commands and their descriptions')
    .setContexts([0, 1, 2])
    .setIntegrationTypes([0, 1]),
  async execute(interaction: ChatInputCommandInteraction): Promise<void> {
    const isAdmin = interaction.memberPermissions?.has('Administrator') || false;
    const mainEmbed = getMainEmbed(interaction);
    const selectMenu = getCategorySelectMenu(interaction, isAdmin);

    await interaction.reply({
      embeds: [mainEmbed],
      components: [selectMenu],
      flags: MessageFlags.Ephemeral
    });
  },
  
  // Handler para o select menu
  async handleSelectMenu(interaction: any): Promise<void> {
    if (!interaction.isStringSelectMenu()) return;
    if (interaction.customId !== 'help_category_select') return;

    const category = interaction.values[0];
    const isAdmin = interaction.memberPermissions?.has('Administrator') || false;
    
    const categoryEmbed = getCategoryEmbed(interaction, category);
    const selectMenu = getCategorySelectMenu(interaction, isAdmin);

    await interaction.update({
      embeds: [categoryEmbed],
      components: [selectMenu]
    });
  }
};
